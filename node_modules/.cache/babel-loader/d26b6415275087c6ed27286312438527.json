{"ast":null,"code":"var _jsxFileName = \"/home/richwill/workspace/visutrader-frontend/src/components/StockChart.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { getDailyStockChart, getIntradayStockChart } from \"./APIConnector\";\nimport CanvasJSReact from \"../assets/canvasjs.stock.react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet CanvasJSStockChart = CanvasJSReact.CanvasJSStockChart;\nconst INTRADAY = \"INTRADAY\";\nconst DAILY = \"DAILY\";\nconst CANDLESTICK = \"CANDLESTICK\";\nconst SPLINE_AREA = \"SPLINE AREA\";\nexport default function StockChart({\n  stockType,\n  chartType,\n  company\n}) {\n  if (stockType === INTRADAY) {\n    return chartType === CANDLESTICK ? /*#__PURE__*/_jsxDEV(IntradayCandlestickChart, {\n      company: company\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(IntradaySplineAreaChart, {\n      company: company\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  } else {\n    return chartType === CANDLESTICK ? /*#__PURE__*/_jsxDEV(DailyCandlestickChart, {\n      company: company\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(DailySplineAreaChart, {\n      company: company\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this);\n  }\n}\n_c = StockChart;\n\nfunction formatIntradayStockData(stockData) {\n  return Object.entries(stockData).map(entries => {\n    const [dateAndTime, priceData] = entries;\n    const array = dateAndTime.split(\" \");\n    const date = array[0];\n    const time = array[1];\n    return {\n      date,\n      time,\n      open: Number(priceData[\"1. open\"]),\n      high: Number(priceData[\"2. high\"]),\n      low: Number(priceData[\"3. low\"]),\n      close: Number(priceData[\"4. close\"])\n    };\n  });\n}\n\nconst IntradayCandlestickChart = ({\n  company\n}) => {\n  _s();\n\n  const [stockData, setStockData] = useState([]);\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getIntradayStockChart(company);\n      console.log(result);\n      setStockData(formatIntradayStockData(result.data[\"Time Series (30min)\"]));\n      console.log(formatIntradayStockData(result.data[\"Time Series (30min)\"]));\n    };\n\n    fetchStockData();\n  }, [company]);\n  return null; // return (\n  //   <CanvasJSStockChart\n  //     options={{\n  //       theme: \"light2\",\n  //       charts: [\n  //         {\n  //           axisX: {\n  //             tickLength: 0,\n  //             labelFormatter: function (e) {\n  //               return \"\";\n  //             },\n  //             crosshair: {\n  //               enabled: true,\n  //               snapToDataPoint: true,\n  //               labelFormatter: function (e) {\n  //                 return \"\";\n  //               },\n  //             },\n  //             scaleBreaks: {\n  //               spacing: 0,\n  //               fillOpacity: 0,\n  //               lineThickness: 0,\n  //               customBreaks: stockData.reduce(\n  //                 (breaks, value, index, array) => {\n  //                   if (index === 0) return breaks;\n  //                   const currentDataPointUnix = Number(new Date(value.date));\n  //                   const previousDataPointUnix = Number(\n  //                     new Date(array[index - 1].date)\n  //                   );\n  //                   const oneDayInMs = 86400000;\n  //                   const difference =\n  //                     previousDataPointUnix - currentDataPointUnix;\n  //                   return difference === oneDayInMs\n  //                     ? breaks\n  //                     : [\n  //                         ...breaks,\n  //                         {\n  //                           startValue: currentDataPointUnix,\n  //                           endValue: previousDataPointUnix - oneDayInMs,\n  //                         },\n  //                       ];\n  //                 },\n  //                 []\n  //               ),\n  //             },\n  //           },\n  //           axisY: {\n  //             prefix: \"$\",\n  //             tickLength: 0,\n  //           },\n  //           toolTip: {\n  //             shared: true,\n  //           },\n  //           data: [\n  //             {\n  //               name: \"Price (in USD)\",\n  //               yValueFormatString: \"$#,###.##\",\n  //               type: \"candlestick\",\n  //               risingColor: \"#04f77e\",\n  //               fallingColor: \"#ff3911\",\n  //               dataPoints: stockData.map((stockData) => ({\n  //                 x: new Date(stockData.date),\n  //                 y: [\n  //                   stockData.open,\n  //                   stockData.high,\n  //                   stockData.low,\n  //                   stockData.close,\n  //                 ],\n  //               })),\n  //             },\n  //           ],\n  //         },\n  //       ],\n  //       navigator: {\n  //         data: [\n  //           {\n  //             dataPoints: stockData.map((stockData) => ({\n  //               x: new Date(stockData.date),\n  //               y: stockData.close,\n  //             })),\n  //           },\n  //         ],\n  //       },\n  //     }}\n  //   />\n  // );\n};\n\n_s(IntradayCandlestickChart, \"UHMRx5rd6U+J7YyAJ82PYuAdhyc=\");\n\n_c2 = IntradayCandlestickChart;\n\nconst IntradaySplineAreaChart = ({\n  company\n}) => {\n  _s2();\n\n  const [stockData, setStockData] = useState([]);\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getDailyStockChart(company);\n      setStockData(formatIntradayStockData(result.data[\"Time Series (Daily)\"]).slice(0, 250));\n    };\n\n    fetchStockData();\n  }, [company]);\n  return /*#__PURE__*/_jsxDEV(CanvasJSStockChart, {\n    options: {\n      theme: \"light2\",\n      charts: [{\n        axisX: {\n          crosshair: {\n            enabled: true,\n            snapToDataPoint: true,\n            valueFormatString: \"MMM DD YYYY\"\n          }\n        },\n        axisY: {\n          prefix: \"$\",\n          crosshair: {\n            enabled: true,\n            snapToDataPoint: true,\n            valueFormatString: \"$#,###.##\"\n          }\n        },\n        toolTip: {\n          shared: true\n        },\n        data: [{\n          name: \"Price (in USD)\",\n          type: \"splineArea\",\n          color: \"#3a4cb1\",\n          yValueFormatString: \"$#,###.##\",\n          xValueFormatString: \"MMM DD YYYY\",\n          dataPoints: stockData.map(stockData => ({\n            x: new Date(stockData.date),\n            y: stockData.close\n          }))\n        }]\n      }]\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(IntradaySplineAreaChart, \"UHMRx5rd6U+J7YyAJ82PYuAdhyc=\");\n\n_c3 = IntradaySplineAreaChart;\n\nfunction formatDailyStockData(stockData) {\n  return Object.entries(stockData).map(entries => {\n    const [date, priceData] = entries;\n    return {\n      date,\n      open: Number(priceData[\"1. open\"]),\n      high: Number(priceData[\"2. high\"]),\n      low: Number(priceData[\"3. low\"]),\n      close: Number(priceData[\"4. close\"])\n    };\n  });\n}\n\nconst DailyCandlestickChart = ({\n  company\n}) => {\n  _s3();\n\n  const [stockData, setStockData] = useState([]);\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getDailyStockChart(company);\n      setStockData(formatDailyStockData(result.data[\"Time Series (Daily)\"]).slice(0, 250));\n    };\n\n    fetchStockData();\n  }, [company]);\n  return /*#__PURE__*/_jsxDEV(CanvasJSStockChart, {\n    options: {\n      theme: \"light2\",\n      charts: [{\n        axisX: {\n          tickLength: 0,\n          labelFormatter: function (e) {\n            return \"\";\n          },\n          crosshair: {\n            enabled: true,\n            snapToDataPoint: true,\n            labelFormatter: function (e) {\n              return \"\";\n            }\n          },\n          scaleBreaks: {\n            spacing: 0,\n            fillOpacity: 0,\n            lineThickness: 0,\n            customBreaks: stockData.reduce((breaks, value, index, array) => {\n              if (index === 0) return breaks;\n              const currentDataPointUnix = Number(new Date(value.date));\n              const previousDataPointUnix = Number(new Date(array[index - 1].date));\n              const oneDayInMs = 86400000;\n              const difference = previousDataPointUnix - currentDataPointUnix;\n              return difference === oneDayInMs ? breaks : [...breaks, {\n                startValue: currentDataPointUnix,\n                endValue: previousDataPointUnix - oneDayInMs\n              }];\n            }, [])\n          }\n        },\n        axisY: {\n          prefix: \"$\",\n          tickLength: 0\n        },\n        toolTip: {\n          shared: true\n        },\n        data: [{\n          name: \"Price (in USD)\",\n          yValueFormatString: \"$#,###.##\",\n          type: \"candlestick\",\n          risingColor: \"#04f77e\",\n          fallingColor: \"#ff3911\",\n          dataPoints: stockData.map(stockData => ({\n            x: new Date(stockData.date),\n            y: [stockData.open, stockData.high, stockData.low, stockData.close]\n          }))\n        }]\n      }],\n      navigator: {\n        data: [{\n          dataPoints: stockData.map(stockData => ({\n            x: new Date(stockData.date),\n            y: stockData.close\n          }))\n        }]\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 233,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(DailyCandlestickChart, \"UHMRx5rd6U+J7YyAJ82PYuAdhyc=\");\n\n_c4 = DailyCandlestickChart;\n\nconst DailySplineAreaChart = ({\n  company\n}) => {\n  _s4();\n\n  const [stockData, setStockData] = useState([]);\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getDailyStockChart(company);\n      setStockData(formatDailyStockData(result.data[\"Time Series (Daily)\"]).slice(0, 250));\n    };\n\n    fetchStockData();\n  }, [company]);\n  return /*#__PURE__*/_jsxDEV(CanvasJSStockChart, {\n    options: {\n      theme: \"light2\",\n      charts: [{\n        axisX: {\n          crosshair: {\n            enabled: true,\n            snapToDataPoint: true,\n            valueFormatString: \"MMM DD YYYY\"\n          }\n        },\n        axisY: {\n          prefix: \"$\",\n          crosshair: {\n            enabled: true,\n            snapToDataPoint: true,\n            valueFormatString: \"$#,###.##\"\n          }\n        },\n        toolTip: {\n          shared: true\n        },\n        data: [{\n          name: \"Price (in USD)\",\n          type: \"splineArea\",\n          color: \"#3a4cb1\",\n          yValueFormatString: \"$#,###.##\",\n          xValueFormatString: \"MMM DD YYYY\",\n          dataPoints: stockData.map(stockData => ({\n            x: new Date(stockData.date),\n            y: stockData.close\n          }))\n        }]\n      }]\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 334,\n    columnNumber: 5\n  }, this);\n};\n\n_s4(DailySplineAreaChart, \"UHMRx5rd6U+J7YyAJ82PYuAdhyc=\");\n\n_c5 = DailySplineAreaChart;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"StockChart\");\n$RefreshReg$(_c2, \"IntradayCandlestickChart\");\n$RefreshReg$(_c3, \"IntradaySplineAreaChart\");\n$RefreshReg$(_c4, \"DailyCandlestickChart\");\n$RefreshReg$(_c5, \"DailySplineAreaChart\");","map":{"version":3,"sources":["/home/richwill/workspace/visutrader-frontend/src/components/StockChart.js"],"names":["React","useState","useEffect","getDailyStockChart","getIntradayStockChart","CanvasJSReact","CanvasJSStockChart","INTRADAY","DAILY","CANDLESTICK","SPLINE_AREA","StockChart","stockType","chartType","company","formatIntradayStockData","stockData","Object","entries","map","dateAndTime","priceData","array","split","date","time","open","Number","high","low","close","IntradayCandlestickChart","setStockData","fetchStockData","result","console","log","data","IntradaySplineAreaChart","slice","theme","charts","axisX","crosshair","enabled","snapToDataPoint","valueFormatString","axisY","prefix","toolTip","shared","name","type","color","yValueFormatString","xValueFormatString","dataPoints","x","Date","y","formatDailyStockData","DailyCandlestickChart","tickLength","labelFormatter","e","scaleBreaks","spacing","fillOpacity","lineThickness","customBreaks","reduce","breaks","value","index","currentDataPointUnix","previousDataPointUnix","oneDayInMs","difference","startValue","endValue","risingColor","fallingColor","navigator","DailySplineAreaChart"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,QAA0D,gBAA1D;AACA,OAAOC,aAAP,MAA0B,gCAA1B;;AACA,IAAIC,kBAAkB,GAAGD,aAAa,CAACC,kBAAvC;AAEA,MAAMC,QAAQ,GAAG,UAAjB;AACA,MAAMC,KAAK,GAAG,OAAd;AACA,MAAMC,WAAW,GAAG,aAApB;AACA,MAAMC,WAAW,GAAG,aAApB;AAEA,eAAe,SAASC,UAAT,CAAoB;AAAEC,EAAAA,SAAF;AAAaC,EAAAA,SAAb;AAAwBC,EAAAA;AAAxB,CAApB,EAAuD;AACpE,MAAIF,SAAS,KAAKL,QAAlB,EAA4B;AAC1B,WAAOM,SAAS,KAAKJ,WAAd,gBACL,QAAC,wBAAD;AAA0B,MAAA,OAAO,EAAEK;AAAnC;AAAA;AAAA;AAAA;AAAA,YADK,gBAGL,QAAC,uBAAD;AAAyB,MAAA,OAAO,EAAEA;AAAlC;AAAA;AAAA;AAAA;AAAA,YAHF;AAKD,GAND,MAMO;AACL,WAAOD,SAAS,KAAKJ,WAAd,gBACL,QAAC,qBAAD;AAAuB,MAAA,OAAO,EAAEK;AAAhC;AAAA;AAAA;AAAA;AAAA,YADK,gBAGL,QAAC,oBAAD;AAAsB,MAAA,OAAO,EAAEA;AAA/B;AAAA;AAAA;AAAA;AAAA,YAHF;AAKD;AACF;KAduBH,U;;AAgBxB,SAASI,uBAAT,CAAiCC,SAAjC,EAA4C;AAC1C,SAAOC,MAAM,CAACC,OAAP,CAAeF,SAAf,EAA0BG,GAA1B,CAA+BD,OAAD,IAAa;AAChD,UAAM,CAACE,WAAD,EAAcC,SAAd,IAA2BH,OAAjC;AACA,UAAMI,KAAK,GAAGF,WAAW,CAACG,KAAZ,CAAkB,GAAlB,CAAd;AACA,UAAMC,IAAI,GAAGF,KAAK,CAAC,CAAD,CAAlB;AACA,UAAMG,IAAI,GAAGH,KAAK,CAAC,CAAD,CAAlB;AACA,WAAO;AACLE,MAAAA,IADK;AAELC,MAAAA,IAFK;AAGLC,MAAAA,IAAI,EAAEC,MAAM,CAACN,SAAS,CAAC,SAAD,CAAV,CAHP;AAILO,MAAAA,IAAI,EAAED,MAAM,CAACN,SAAS,CAAC,SAAD,CAAV,CAJP;AAKLQ,MAAAA,GAAG,EAAEF,MAAM,CAACN,SAAS,CAAC,QAAD,CAAV,CALN;AAMLS,MAAAA,KAAK,EAAEH,MAAM,CAACN,SAAS,CAAC,UAAD,CAAV;AANR,KAAP;AAQD,GAbM,CAAP;AAcD;;AAED,MAAMU,wBAAwB,GAAG,CAAC;AAAEjB,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AAChD,QAAM,CAACE,SAAD,EAAYgB,YAAZ,IAA4B/B,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM+B,cAAc,GAAG,YAAY;AACjC,YAAMC,MAAM,GAAG,MAAM9B,qBAAqB,CAACU,OAAD,CAA1C;AACAqB,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAF,MAAAA,YAAY,CAACjB,uBAAuB,CAACmB,MAAM,CAACG,IAAP,CAAY,qBAAZ,CAAD,CAAxB,CAAZ;AACAF,MAAAA,OAAO,CAACC,GAAR,CAAYrB,uBAAuB,CAACmB,MAAM,CAACG,IAAP,CAAY,qBAAZ,CAAD,CAAnC;AACD,KALD;;AAMAJ,IAAAA,cAAc;AACf,GARQ,EAQN,CAACnB,OAAD,CARM,CAAT;AAUA,SAAO,IAAP,CAbgD,CAchD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,CApGD;;GAAMiB,wB;;MAAAA,wB;;AAsGN,MAAMO,uBAAuB,GAAG,CAAC;AAAExB,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AAC/C,QAAM,CAACE,SAAD,EAAYgB,YAAZ,IAA4B/B,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM+B,cAAc,GAAG,YAAY;AACjC,YAAMC,MAAM,GAAG,MAAM/B,kBAAkB,CAACW,OAAD,CAAvC;AACAkB,MAAAA,YAAY,CACVjB,uBAAuB,CAACmB,MAAM,CAACG,IAAP,CAAY,qBAAZ,CAAD,CAAvB,CAA4DE,KAA5D,CACE,CADF,EAEE,GAFF,CADU,CAAZ;AAMD,KARD;;AASAN,IAAAA,cAAc;AACf,GAXQ,EAWN,CAACnB,OAAD,CAXM,CAAT;AAaA,sBACE,QAAC,kBAAD;AACE,IAAA,OAAO,EAAE;AACP0B,MAAAA,KAAK,EAAE,QADA;AAEPC,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAE;AACTC,YAAAA,OAAO,EAAE,IADA;AAETC,YAAAA,eAAe,EAAE,IAFR;AAGTC,YAAAA,iBAAiB,EAAE;AAHV;AADN,SADT;AAQEC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE,GADH;AAELL,UAAAA,SAAS,EAAE;AACTC,YAAAA,OAAO,EAAE,IADA;AAETC,YAAAA,eAAe,EAAE,IAFR;AAGTC,YAAAA,iBAAiB,EAAE;AAHV;AAFN,SART;AAgBEG,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE;AADD,SAhBX;AAmBEb,QAAAA,IAAI,EAAE,CACJ;AACEc,UAAAA,IAAI,EAAE,gBADR;AAEEC,UAAAA,IAAI,EAAE,YAFR;AAGEC,UAAAA,KAAK,EAAE,SAHT;AAIEC,UAAAA,kBAAkB,EAAE,WAJtB;AAKEC,UAAAA,kBAAkB,EAAE,aALtB;AAMEC,UAAAA,UAAU,EAAExC,SAAS,CAACG,GAAV,CAAeH,SAAD,KAAgB;AACxCyC,YAAAA,CAAC,EAAE,IAAIC,IAAJ,CAAS1C,SAAS,CAACQ,IAAnB,CADqC;AAExCmC,YAAAA,CAAC,EAAE3C,SAAS,CAACc;AAF2B,WAAhB,CAAd;AANd,SADI;AAnBR,OADM;AAFD;AADX;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD,CA1DD;;IAAMQ,uB;;MAAAA,uB;;AA4DN,SAASsB,oBAAT,CAA8B5C,SAA9B,EAAyC;AACvC,SAAOC,MAAM,CAACC,OAAP,CAAeF,SAAf,EAA0BG,GAA1B,CAA+BD,OAAD,IAAa;AAChD,UAAM,CAACM,IAAD,EAAOH,SAAP,IAAoBH,OAA1B;AACA,WAAO;AACLM,MAAAA,IADK;AAELE,MAAAA,IAAI,EAAEC,MAAM,CAACN,SAAS,CAAC,SAAD,CAAV,CAFP;AAGLO,MAAAA,IAAI,EAAED,MAAM,CAACN,SAAS,CAAC,SAAD,CAAV,CAHP;AAILQ,MAAAA,GAAG,EAAEF,MAAM,CAACN,SAAS,CAAC,QAAD,CAAV,CAJN;AAKLS,MAAAA,KAAK,EAAEH,MAAM,CAACN,SAAS,CAAC,UAAD,CAAV;AALR,KAAP;AAOD,GATM,CAAP;AAUD;;AAED,MAAMwC,qBAAqB,GAAG,CAAC;AAAE/C,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AAC7C,QAAM,CAACE,SAAD,EAAYgB,YAAZ,IAA4B/B,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM+B,cAAc,GAAG,YAAY;AACjC,YAAMC,MAAM,GAAG,MAAM/B,kBAAkB,CAACW,OAAD,CAAvC;AACAkB,MAAAA,YAAY,CACV4B,oBAAoB,CAAC1B,MAAM,CAACG,IAAP,CAAY,qBAAZ,CAAD,CAApB,CAAyDE,KAAzD,CAA+D,CAA/D,EAAkE,GAAlE,CADU,CAAZ;AAGD,KALD;;AAMAN,IAAAA,cAAc;AACf,GARQ,EAQN,CAACnB,OAAD,CARM,CAAT;AAUA,sBACE,QAAC,kBAAD;AACE,IAAA,OAAO,EAAE;AACP0B,MAAAA,KAAK,EAAE,QADA;AAEPC,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,KAAK,EAAE;AACLoB,UAAAA,UAAU,EAAE,CADP;AAELC,UAAAA,cAAc,EAAE,UAAUC,CAAV,EAAa;AAC3B,mBAAO,EAAP;AACD,WAJI;AAKLrB,UAAAA,SAAS,EAAE;AACTC,YAAAA,OAAO,EAAE,IADA;AAETC,YAAAA,eAAe,EAAE,IAFR;AAGTkB,YAAAA,cAAc,EAAE,UAAUC,CAAV,EAAa;AAC3B,qBAAO,EAAP;AACD;AALQ,WALN;AAYLC,UAAAA,WAAW,EAAE;AACXC,YAAAA,OAAO,EAAE,CADE;AAEXC,YAAAA,WAAW,EAAE,CAFF;AAGXC,YAAAA,aAAa,EAAE,CAHJ;AAIXC,YAAAA,YAAY,EAAErD,SAAS,CAACsD,MAAV,CACZ,CAACC,MAAD,EAASC,KAAT,EAAgBC,KAAhB,EAAuBnD,KAAvB,KAAiC;AAC/B,kBAAImD,KAAK,KAAK,CAAd,EAAiB,OAAOF,MAAP;AACjB,oBAAMG,oBAAoB,GAAG/C,MAAM,CAAC,IAAI+B,IAAJ,CAASc,KAAK,CAAChD,IAAf,CAAD,CAAnC;AACA,oBAAMmD,qBAAqB,GAAGhD,MAAM,CAClC,IAAI+B,IAAJ,CAASpC,KAAK,CAACmD,KAAK,GAAG,CAAT,CAAL,CAAiBjD,IAA1B,CADkC,CAApC;AAGA,oBAAMoD,UAAU,GAAG,QAAnB;AACA,oBAAMC,UAAU,GACdF,qBAAqB,GAAGD,oBAD1B;AAEA,qBAAOG,UAAU,KAAKD,UAAf,GACHL,MADG,GAEH,CACE,GAAGA,MADL,EAEE;AACEO,gBAAAA,UAAU,EAAEJ,oBADd;AAEEK,gBAAAA,QAAQ,EAAEJ,qBAAqB,GAAGC;AAFpC,eAFF,CAFJ;AASD,aAnBW,EAoBZ,EApBY;AAJH;AAZR,SADT;AAyCE7B,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE,GADH;AAELc,UAAAA,UAAU,EAAE;AAFP,SAzCT;AA6CEb,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE;AADD,SA7CX;AAgDEb,QAAAA,IAAI,EAAE,CACJ;AACEc,UAAAA,IAAI,EAAE,gBADR;AAEEG,UAAAA,kBAAkB,EAAE,WAFtB;AAGEF,UAAAA,IAAI,EAAE,aAHR;AAIE4B,UAAAA,WAAW,EAAE,SAJf;AAKEC,UAAAA,YAAY,EAAE,SALhB;AAMEzB,UAAAA,UAAU,EAAExC,SAAS,CAACG,GAAV,CAAeH,SAAD,KAAgB;AACxCyC,YAAAA,CAAC,EAAE,IAAIC,IAAJ,CAAS1C,SAAS,CAACQ,IAAnB,CADqC;AAExCmC,YAAAA,CAAC,EAAE,CACD3C,SAAS,CAACU,IADT,EAEDV,SAAS,CAACY,IAFT,EAGDZ,SAAS,CAACa,GAHT,EAIDb,SAAS,CAACc,KAJT;AAFqC,WAAhB,CAAd;AANd,SADI;AAhDR,OADM,CAFD;AAuEPoD,MAAAA,SAAS,EAAE;AACT7C,QAAAA,IAAI,EAAE,CACJ;AACEmB,UAAAA,UAAU,EAAExC,SAAS,CAACG,GAAV,CAAeH,SAAD,KAAgB;AACxCyC,YAAAA,CAAC,EAAE,IAAIC,IAAJ,CAAS1C,SAAS,CAACQ,IAAnB,CADqC;AAExCmC,YAAAA,CAAC,EAAE3C,SAAS,CAACc;AAF2B,WAAhB,CAAd;AADd,SADI;AADG;AAvEJ;AADX;AAAA;AAAA;AAAA;AAAA,UADF;AAsFD,CAnGD;;IAAM+B,qB;;MAAAA,qB;;AAqGN,MAAMsB,oBAAoB,GAAG,CAAC;AAAErE,EAAAA;AAAF,CAAD,KAAiB;AAAA;;AAC5C,QAAM,CAACE,SAAD,EAAYgB,YAAZ,IAA4B/B,QAAQ,CAAC,EAAD,CAA1C;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAM+B,cAAc,GAAG,YAAY;AACjC,YAAMC,MAAM,GAAG,MAAM/B,kBAAkB,CAACW,OAAD,CAAvC;AACAkB,MAAAA,YAAY,CACV4B,oBAAoB,CAAC1B,MAAM,CAACG,IAAP,CAAY,qBAAZ,CAAD,CAApB,CAAyDE,KAAzD,CAA+D,CAA/D,EAAkE,GAAlE,CADU,CAAZ;AAGD,KALD;;AAMAN,IAAAA,cAAc;AACf,GARQ,EAQN,CAACnB,OAAD,CARM,CAAT;AAUA,sBACE,QAAC,kBAAD;AACE,IAAA,OAAO,EAAE;AACP0B,MAAAA,KAAK,EAAE,QADA;AAEPC,MAAAA,MAAM,EAAE,CACN;AACEC,QAAAA,KAAK,EAAE;AACLC,UAAAA,SAAS,EAAE;AACTC,YAAAA,OAAO,EAAE,IADA;AAETC,YAAAA,eAAe,EAAE,IAFR;AAGTC,YAAAA,iBAAiB,EAAE;AAHV;AADN,SADT;AAQEC,QAAAA,KAAK,EAAE;AACLC,UAAAA,MAAM,EAAE,GADH;AAELL,UAAAA,SAAS,EAAE;AACTC,YAAAA,OAAO,EAAE,IADA;AAETC,YAAAA,eAAe,EAAE,IAFR;AAGTC,YAAAA,iBAAiB,EAAE;AAHV;AAFN,SART;AAgBEG,QAAAA,OAAO,EAAE;AACPC,UAAAA,MAAM,EAAE;AADD,SAhBX;AAmBEb,QAAAA,IAAI,EAAE,CACJ;AACEc,UAAAA,IAAI,EAAE,gBADR;AAEEC,UAAAA,IAAI,EAAE,YAFR;AAGEC,UAAAA,KAAK,EAAE,SAHT;AAIEC,UAAAA,kBAAkB,EAAE,WAJtB;AAKEC,UAAAA,kBAAkB,EAAE,aALtB;AAMEC,UAAAA,UAAU,EAAExC,SAAS,CAACG,GAAV,CAAeH,SAAD,KAAgB;AACxCyC,YAAAA,CAAC,EAAE,IAAIC,IAAJ,CAAS1C,SAAS,CAACQ,IAAnB,CADqC;AAExCmC,YAAAA,CAAC,EAAE3C,SAAS,CAACc;AAF2B,WAAhB,CAAd;AANd,SADI;AAnBR,OADM;AAFD;AADX;AAAA;AAAA;AAAA;AAAA,UADF;AA0CD,CAvDD;;IAAMqD,oB;;MAAAA,oB","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getDailyStockChart, getIntradayStockChart } from \"./APIConnector\";\nimport CanvasJSReact from \"../assets/canvasjs.stock.react\";\nlet CanvasJSStockChart = CanvasJSReact.CanvasJSStockChart;\n\nconst INTRADAY = \"INTRADAY\";\nconst DAILY = \"DAILY\";\nconst CANDLESTICK = \"CANDLESTICK\";\nconst SPLINE_AREA = \"SPLINE AREA\";\n\nexport default function StockChart({ stockType, chartType, company }) {\n  if (stockType === INTRADAY) {\n    return chartType === CANDLESTICK ? (\n      <IntradayCandlestickChart company={company} />\n    ) : (\n      <IntradaySplineAreaChart company={company} />\n    );\n  } else {\n    return chartType === CANDLESTICK ? (\n      <DailyCandlestickChart company={company} />\n    ) : (\n      <DailySplineAreaChart company={company} />\n    );\n  }\n}\n\nfunction formatIntradayStockData(stockData) {\n  return Object.entries(stockData).map((entries) => {\n    const [dateAndTime, priceData] = entries;\n    const array = dateAndTime.split(\" \");\n    const date = array[0];\n    const time = array[1];\n    return {\n      date,\n      time,\n      open: Number(priceData[\"1. open\"]),\n      high: Number(priceData[\"2. high\"]),\n      low: Number(priceData[\"3. low\"]),\n      close: Number(priceData[\"4. close\"]),\n    };\n  });\n}\n\nconst IntradayCandlestickChart = ({ company }) => {\n  const [stockData, setStockData] = useState([]);\n\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getIntradayStockChart(company);\n      console.log(result);\n      setStockData(formatIntradayStockData(result.data[\"Time Series (30min)\"]));\n      console.log(formatIntradayStockData(result.data[\"Time Series (30min)\"]));\n    };\n    fetchStockData();\n  }, [company]);\n\n  return null;\n  // return (\n  //   <CanvasJSStockChart\n  //     options={{\n  //       theme: \"light2\",\n  //       charts: [\n  //         {\n  //           axisX: {\n  //             tickLength: 0,\n  //             labelFormatter: function (e) {\n  //               return \"\";\n  //             },\n  //             crosshair: {\n  //               enabled: true,\n  //               snapToDataPoint: true,\n  //               labelFormatter: function (e) {\n  //                 return \"\";\n  //               },\n  //             },\n  //             scaleBreaks: {\n  //               spacing: 0,\n  //               fillOpacity: 0,\n  //               lineThickness: 0,\n  //               customBreaks: stockData.reduce(\n  //                 (breaks, value, index, array) => {\n  //                   if (index === 0) return breaks;\n  //                   const currentDataPointUnix = Number(new Date(value.date));\n  //                   const previousDataPointUnix = Number(\n  //                     new Date(array[index - 1].date)\n  //                   );\n  //                   const oneDayInMs = 86400000;\n  //                   const difference =\n  //                     previousDataPointUnix - currentDataPointUnix;\n  //                   return difference === oneDayInMs\n  //                     ? breaks\n  //                     : [\n  //                         ...breaks,\n  //                         {\n  //                           startValue: currentDataPointUnix,\n  //                           endValue: previousDataPointUnix - oneDayInMs,\n  //                         },\n  //                       ];\n  //                 },\n  //                 []\n  //               ),\n  //             },\n  //           },\n  //           axisY: {\n  //             prefix: \"$\",\n  //             tickLength: 0,\n  //           },\n  //           toolTip: {\n  //             shared: true,\n  //           },\n  //           data: [\n  //             {\n  //               name: \"Price (in USD)\",\n  //               yValueFormatString: \"$#,###.##\",\n  //               type: \"candlestick\",\n  //               risingColor: \"#04f77e\",\n  //               fallingColor: \"#ff3911\",\n  //               dataPoints: stockData.map((stockData) => ({\n  //                 x: new Date(stockData.date),\n  //                 y: [\n  //                   stockData.open,\n  //                   stockData.high,\n  //                   stockData.low,\n  //                   stockData.close,\n  //                 ],\n  //               })),\n  //             },\n  //           ],\n  //         },\n  //       ],\n  //       navigator: {\n  //         data: [\n  //           {\n  //             dataPoints: stockData.map((stockData) => ({\n  //               x: new Date(stockData.date),\n  //               y: stockData.close,\n  //             })),\n  //           },\n  //         ],\n  //       },\n  //     }}\n  //   />\n  // );\n};\n\nconst IntradaySplineAreaChart = ({ company }) => {\n  const [stockData, setStockData] = useState([]);\n\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getDailyStockChart(company);\n      setStockData(\n        formatIntradayStockData(result.data[\"Time Series (Daily)\"]).slice(\n          0,\n          250\n        )\n      );\n    };\n    fetchStockData();\n  }, [company]);\n\n  return (\n    <CanvasJSStockChart\n      options={{\n        theme: \"light2\",\n        charts: [\n          {\n            axisX: {\n              crosshair: {\n                enabled: true,\n                snapToDataPoint: true,\n                valueFormatString: \"MMM DD YYYY\",\n              },\n            },\n            axisY: {\n              prefix: \"$\",\n              crosshair: {\n                enabled: true,\n                snapToDataPoint: true,\n                valueFormatString: \"$#,###.##\",\n              },\n            },\n            toolTip: {\n              shared: true,\n            },\n            data: [\n              {\n                name: \"Price (in USD)\",\n                type: \"splineArea\",\n                color: \"#3a4cb1\",\n                yValueFormatString: \"$#,###.##\",\n                xValueFormatString: \"MMM DD YYYY\",\n                dataPoints: stockData.map((stockData) => ({\n                  x: new Date(stockData.date),\n                  y: stockData.close,\n                })),\n              },\n            ],\n          },\n        ],\n      }}\n    />\n  );\n};\n\nfunction formatDailyStockData(stockData) {\n  return Object.entries(stockData).map((entries) => {\n    const [date, priceData] = entries;\n    return {\n      date,\n      open: Number(priceData[\"1. open\"]),\n      high: Number(priceData[\"2. high\"]),\n      low: Number(priceData[\"3. low\"]),\n      close: Number(priceData[\"4. close\"]),\n    };\n  });\n}\n\nconst DailyCandlestickChart = ({ company }) => {\n  const [stockData, setStockData] = useState([]);\n\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getDailyStockChart(company);\n      setStockData(\n        formatDailyStockData(result.data[\"Time Series (Daily)\"]).slice(0, 250)\n      );\n    };\n    fetchStockData();\n  }, [company]);\n\n  return (\n    <CanvasJSStockChart\n      options={{\n        theme: \"light2\",\n        charts: [\n          {\n            axisX: {\n              tickLength: 0,\n              labelFormatter: function (e) {\n                return \"\";\n              },\n              crosshair: {\n                enabled: true,\n                snapToDataPoint: true,\n                labelFormatter: function (e) {\n                  return \"\";\n                },\n              },\n              scaleBreaks: {\n                spacing: 0,\n                fillOpacity: 0,\n                lineThickness: 0,\n                customBreaks: stockData.reduce(\n                  (breaks, value, index, array) => {\n                    if (index === 0) return breaks;\n                    const currentDataPointUnix = Number(new Date(value.date));\n                    const previousDataPointUnix = Number(\n                      new Date(array[index - 1].date)\n                    );\n                    const oneDayInMs = 86400000;\n                    const difference =\n                      previousDataPointUnix - currentDataPointUnix;\n                    return difference === oneDayInMs\n                      ? breaks\n                      : [\n                          ...breaks,\n                          {\n                            startValue: currentDataPointUnix,\n                            endValue: previousDataPointUnix - oneDayInMs,\n                          },\n                        ];\n                  },\n                  []\n                ),\n              },\n            },\n            axisY: {\n              prefix: \"$\",\n              tickLength: 0,\n            },\n            toolTip: {\n              shared: true,\n            },\n            data: [\n              {\n                name: \"Price (in USD)\",\n                yValueFormatString: \"$#,###.##\",\n                type: \"candlestick\",\n                risingColor: \"#04f77e\",\n                fallingColor: \"#ff3911\",\n                dataPoints: stockData.map((stockData) => ({\n                  x: new Date(stockData.date),\n                  y: [\n                    stockData.open,\n                    stockData.high,\n                    stockData.low,\n                    stockData.close,\n                  ],\n                })),\n              },\n            ],\n          },\n        ],\n        navigator: {\n          data: [\n            {\n              dataPoints: stockData.map((stockData) => ({\n                x: new Date(stockData.date),\n                y: stockData.close,\n              })),\n            },\n          ],\n        },\n      }}\n    />\n  );\n};\n\nconst DailySplineAreaChart = ({ company }) => {\n  const [stockData, setStockData] = useState([]);\n\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getDailyStockChart(company);\n      setStockData(\n        formatDailyStockData(result.data[\"Time Series (Daily)\"]).slice(0, 250)\n      );\n    };\n    fetchStockData();\n  }, [company]);\n\n  return (\n    <CanvasJSStockChart\n      options={{\n        theme: \"light2\",\n        charts: [\n          {\n            axisX: {\n              crosshair: {\n                enabled: true,\n                snapToDataPoint: true,\n                valueFormatString: \"MMM DD YYYY\",\n              },\n            },\n            axisY: {\n              prefix: \"$\",\n              crosshair: {\n                enabled: true,\n                snapToDataPoint: true,\n                valueFormatString: \"$#,###.##\",\n              },\n            },\n            toolTip: {\n              shared: true,\n            },\n            data: [\n              {\n                name: \"Price (in USD)\",\n                type: \"splineArea\",\n                color: \"#3a4cb1\",\n                yValueFormatString: \"$#,###.##\",\n                xValueFormatString: \"MMM DD YYYY\",\n                dataPoints: stockData.map((stockData) => ({\n                  x: new Date(stockData.date),\n                  y: stockData.close,\n                })),\n              },\n            ],\n          },\n        ],\n      }}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}