{"ast":null,"code":"var _jsxFileName = \"/home/richwill/workspace/visutrader-frontend/src/components/StockChart.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { getDailyStockChart, getIntradayStockChart } from \"./APIConnector\";\nimport CanvasJSReact from \"../assets/canvasjs.stock.react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet CanvasJSStockChart = CanvasJSReact.CanvasJSStockChart;\nconst INTRADAY = \"INTRADAY\";\nconst DAILY = \"DAILY\";\nconst CANDLESTICK = \"CANDLESTICK\";\nconst SPLINE_AREA = \"SPLINE AREA\";\nexport default function StockChart({\n  stockType,\n  chartType,\n  company\n}) {\n  if (stockType === INTRADAY) {\n    return chartType === CANDLESTICK ? /*#__PURE__*/_jsxDEV(IntradayCandlestickChart, {\n      company: company\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 40\n    }, this) : /*#__PURE__*/_jsxDEV(IntradaySplineAreaChart, {\n      company: company\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 89\n    }, this);\n  } else {\n    return chartType === CANDLESTICK ? /*#__PURE__*/_jsxDEV(DailyCandlestickChart, {\n      company: company\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 40\n    }, this) : /*#__PURE__*/_jsxDEV(DailySplineAreaChart, {\n      company: company\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 86\n    }, this);\n  }\n}\n_c = StockChart;\n\nconst IntradayCandlestickChart = ({\n  company\n}) => {\n  _s();\n\n  const [stockData, setStockData] = useState([]);\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getIntradayStockChart(company);\n      console.log(result);\n      setStockData(formatIntradayStockData(result.data[\"Time Series (30min)\"]));\n    };\n\n    fetchStockData();\n  }, [company]);\n  return /*#__PURE__*/_jsxDEV(CanvasJSStockChart, {\n    options: {\n      theme: \"light2\",\n      charts: [{\n        axisX: {\n          tickLength: 0,\n          labelFormatter: function (e) {\n            return \"\";\n          },\n          crosshair: {\n            enabled: true,\n            snapToDataPoint: true,\n            labelFormatter: function (e) {\n              return \"\";\n            }\n          },\n          scaleBreaks: {\n            spacing: 0,\n            fillOpacity: 0,\n            lineThickness: 0,\n            customBreaks: stockData.reduce((breaks, value, index, array) => {\n              if (index === 0) return breaks;\n              const currentDataPointUnix = Number(new Date(value.date));\n              const previousDataPointUnix = Number(new Date(array[index - 1].date));\n              const oneDayInMs = 86400000;\n              const difference = previousDataPointUnix - currentDataPointUnix;\n              return difference === oneDayInMs ? breaks : [...breaks, {\n                startValue: currentDataPointUnix,\n                endValue: previousDataPointUnix - oneDayInMs\n              }];\n            }, [])\n          }\n        },\n        axisY: {\n          prefix: \"$\",\n          tickLength: 0\n        },\n        toolTip: {\n          shared: true\n        },\n        data: [{\n          name: \"Price (in USD)\",\n          yValueFormatString: \"$#,###.##\",\n          type: \"candlestick\",\n          risingColor: \"#04f77e\",\n          fallingColor: \"#ff3911\",\n          dataPoints: stockData.map(stockData => ({\n            x: new Date(stockData.date),\n            y: [stockData.open, stockData.high, stockData.low, stockData.close]\n          }))\n        }]\n      }],\n      navigator: {\n        data: [{\n          dataPoints: stockData.map(stockData => ({\n            x: new Date(stockData.date),\n            y: stockData.close\n          }))\n        }]\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n\n_s(IntradayCandlestickChart, \"UHMRx5rd6U+J7YyAJ82PYuAdhyc=\");\n\n_c2 = IntradayCandlestickChart;\n\nconst IntradaySplineAreaChart = ({\n  company\n}) => {\n  _s2();\n\n  const [stockData, setStockData] = useState([]);\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getDailyStockChart(company);\n      setStockData(formatIntradayStockData(result.data[\"Time Series (Daily)\"]).slice(0, 250));\n    };\n\n    fetchStockData();\n  }, [company]);\n  return /*#__PURE__*/_jsxDEV(CanvasJSStockChart, {\n    options: {\n      theme: \"light2\",\n      charts: [{\n        axisX: {\n          crosshair: {\n            enabled: true,\n            snapToDataPoint: true,\n            valueFormatString: \"MMM DD YYYY\"\n          }\n        },\n        axisY: {\n          prefix: \"$\",\n          crosshair: {\n            enabled: true,\n            snapToDataPoint: true,\n            valueFormatString: \"$#,###.##\"\n          }\n        },\n        toolTip: {\n          shared: true\n        },\n        data: [{\n          name: \"Price (in USD)\",\n          type: \"splineArea\",\n          color: \"#3a4cb1\",\n          yValueFormatString: \"$#,###.##\",\n          xValueFormatString: \"MMM DD YYYY\",\n          dataPoints: stockData.map(stockData => ({\n            x: new Date(stockData.date),\n            y: stockData.close\n          }))\n        }]\n      }]\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(IntradaySplineAreaChart, \"UHMRx5rd6U+J7YyAJ82PYuAdhyc=\");\n\n_c3 = IntradaySplineAreaChart;\n\nfunction formatDailyStockData(stockData) {\n  return Object.entries(stockData).map(entries => {\n    const [date, priceData] = entries;\n    return {\n      date,\n      open: Number(priceData[\"1. open\"]),\n      high: Number(priceData[\"2. high\"]),\n      low: Number(priceData[\"3. low\"]),\n      close: Number(priceData[\"4. close\"])\n    };\n  });\n}\n\nconst DailyCandlestickChart = ({\n  company\n}) => {\n  _s3();\n\n  const [stockData, setStockData] = useState([]);\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getDailyStockChart(company);\n      setStockData(formatDailyStockData(result.data[\"Time Series (Daily)\"]).slice(0, 250));\n    };\n\n    fetchStockData();\n  }, [company]);\n  return /*#__PURE__*/_jsxDEV(CanvasJSStockChart, {\n    options: {\n      theme: \"light2\",\n      charts: [{\n        axisX: {\n          tickLength: 0,\n          labelFormatter: function (e) {\n            return \"\";\n          },\n          crosshair: {\n            enabled: true,\n            snapToDataPoint: true,\n            labelFormatter: function (e) {\n              return \"\";\n            }\n          },\n          scaleBreaks: {\n            spacing: 0,\n            fillOpacity: 0,\n            lineThickness: 0,\n            customBreaks: stockData.reduce((breaks, value, index, array) => {\n              if (index === 0) return breaks;\n              const currentDataPointUnix = Number(new Date(value.date));\n              const previousDataPointUnix = Number(new Date(array[index - 1].date));\n              const oneDayInMs = 86400000;\n              const difference = previousDataPointUnix - currentDataPointUnix;\n              return difference === oneDayInMs ? breaks : [...breaks, {\n                startValue: currentDataPointUnix,\n                endValue: previousDataPointUnix - oneDayInMs\n              }];\n            }, [])\n          }\n        },\n        axisY: {\n          prefix: \"$\",\n          tickLength: 0\n        },\n        toolTip: {\n          shared: true\n        },\n        data: [{\n          name: \"Price (in USD)\",\n          yValueFormatString: \"$#,###.##\",\n          type: \"candlestick\",\n          risingColor: \"#04f77e\",\n          fallingColor: \"#ff3911\",\n          dataPoints: stockData.map(stockData => ({\n            x: new Date(stockData.date),\n            y: [stockData.open, stockData.high, stockData.low, stockData.close]\n          }))\n        }]\n      }],\n      navigator: {\n        data: [{\n          dataPoints: stockData.map(stockData => ({\n            x: new Date(stockData.date),\n            y: stockData.close\n          }))\n        }]\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 205,\n    columnNumber: 5\n  }, this);\n};\n\n_s3(DailyCandlestickChart, \"UHMRx5rd6U+J7YyAJ82PYuAdhyc=\");\n\n_c4 = DailyCandlestickChart;\n\nconst DailySplineAreaChart = ({\n  company\n}) => {\n  _s4();\n\n  const [stockData, setStockData] = useState([]);\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getDailyStockChart(company);\n      setStockData(formatDailyStockData(result.data[\"Time Series (Daily)\"]).slice(0, 250));\n    };\n\n    fetchStockData();\n  }, [company]);\n  return /*#__PURE__*/_jsxDEV(CanvasJSStockChart, {\n    options: {\n      theme: \"light2\",\n      charts: [{\n        axisX: {\n          crosshair: {\n            enabled: true,\n            snapToDataPoint: true,\n            valueFormatString: \"MMM DD YYYY\"\n          }\n        },\n        axisY: {\n          prefix: \"$\",\n          crosshair: {\n            enabled: true,\n            snapToDataPoint: true,\n            valueFormatString: \"$#,###.##\"\n          }\n        },\n        toolTip: {\n          shared: true\n        },\n        data: [{\n          name: \"Price (in USD)\",\n          type: \"splineArea\",\n          color: \"#3a4cb1\",\n          yValueFormatString: \"$#,###.##\",\n          xValueFormatString: \"MMM DD YYYY\",\n          dataPoints: stockData.map(stockData => ({\n            x: new Date(stockData.date),\n            y: stockData.close\n          }))\n        }]\n      }]\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 5\n  }, this);\n};\n\n_s4(DailySplineAreaChart, \"UHMRx5rd6U+J7YyAJ82PYuAdhyc=\");\n\n_c5 = DailySplineAreaChart;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"StockChart\");\n$RefreshReg$(_c2, \"IntradayCandlestickChart\");\n$RefreshReg$(_c3, \"IntradaySplineAreaChart\");\n$RefreshReg$(_c4, \"DailyCandlestickChart\");\n$RefreshReg$(_c5, \"DailySplineAreaChart\");","map":{"version":3,"sources":["/home/richwill/workspace/visutrader-frontend/src/components/StockChart.js"],"names":["React","useState","useEffect","getDailyStockChart","getIntradayStockChart","CanvasJSReact","CanvasJSStockChart","INTRADAY","DAILY","CANDLESTICK","SPLINE_AREA","StockChart","stockType","chartType","company","IntradayCandlestickChart","stockData","setStockData","fetchStockData","result","console","log","formatIntradayStockData","data","theme","charts","axisX","tickLength","labelFormatter","e","crosshair","enabled","snapToDataPoint","scaleBreaks","spacing","fillOpacity","lineThickness","customBreaks","reduce","breaks","value","index","array","currentDataPointUnix","Number","Date","date","previousDataPointUnix","oneDayInMs","difference","startValue","endValue","axisY","prefix","toolTip","shared","name","yValueFormatString","type","risingColor","fallingColor","dataPoints","map","x","y","open","high","low","close","navigator","IntradaySplineAreaChart","slice","valueFormatString","color","xValueFormatString","formatDailyStockData","Object","entries","priceData","DailyCandlestickChart","DailySplineAreaChart"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getDailyStockChart, getIntradayStockChart } from \"./APIConnector\";\nimport CanvasJSReact from \"../assets/canvasjs.stock.react\";\nlet CanvasJSStockChart = CanvasJSReact.CanvasJSStockChart;\n\nconst INTRADAY = \"INTRADAY\";\nconst DAILY = \"DAILY\";\nconst CANDLESTICK = \"CANDLESTICK\";\nconst SPLINE_AREA = \"SPLINE AREA\";\n\nexport default function StockChart({ stockType, chartType, company }) {\n  if (stockType === INTRADAY) {\n    return chartType === CANDLESTICK ? <IntradayCandlestickChart company={company} /> : <IntradaySplineAreaChart company={company} />;\n  } else {\n    return chartType === CANDLESTICK ? <DailyCandlestickChart company={company} /> : <DailySplineAreaChart company={company} />;\n  }\n}\n\nconst IntradayCandlestickChart = ({ company }) => {\n  const [stockData, setStockData] = useState([]);\n\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getIntradayStockChart(company);\n      console.log(result);\n      setStockData(\n        formatIntradayStockData(result.data[\"Time Series (30min)\"])\n      );\n    };\n    fetchStockData();\n  }, [company]);\n\n  return (\n    <CanvasJSStockChart\n      options={{\n        theme: \"light2\",\n        charts: [\n          {\n            axisX: {\n              tickLength: 0,\n              labelFormatter: function (e) {\n                return \"\";\n              },\n              crosshair: {\n                enabled: true,\n                snapToDataPoint: true,\n                labelFormatter: function (e) {\n                  return \"\";\n                },\n              },\n              scaleBreaks: {\n                spacing: 0,\n                fillOpacity: 0,\n                lineThickness: 0,\n                customBreaks: stockData.reduce(\n                  (breaks, value, index, array) => {\n                    if (index === 0) return breaks;\n                    const currentDataPointUnix = Number(new Date(value.date));\n                    const previousDataPointUnix = Number(\n                      new Date(array[index - 1].date)\n                    );\n                    const oneDayInMs = 86400000;\n                    const difference =\n                      previousDataPointUnix - currentDataPointUnix;\n                    return difference === oneDayInMs\n                      ? breaks\n                      : [\n                          ...breaks,\n                          {\n                            startValue: currentDataPointUnix,\n                            endValue: previousDataPointUnix - oneDayInMs,\n                          },\n                        ];\n                  },\n                  []\n                ),\n              },\n            },\n            axisY: {\n              prefix: \"$\",\n              tickLength: 0,\n            },\n            toolTip: {\n              shared: true,\n            },\n            data: [\n              {\n                name: \"Price (in USD)\",\n                yValueFormatString: \"$#,###.##\",\n                type: \"candlestick\",\n                risingColor: \"#04f77e\",\n                fallingColor: \"#ff3911\",\n                dataPoints: stockData.map((stockData) => ({\n                  x: new Date(stockData.date),\n                  y: [\n                    stockData.open,\n                    stockData.high,\n                    stockData.low,\n                    stockData.close,\n                  ],\n                })),\n              },\n            ],\n          },\n        ],\n        navigator: {\n          data: [\n            {\n              dataPoints: stockData.map((stockData) => ({\n                x: new Date(stockData.date),\n                y: stockData.close,\n              })),\n            },\n          ],\n        },\n      }}\n    />\n  );\n};\n\nconst IntradaySplineAreaChart = ({ company }) => {\n  const [stockData, setStockData] = useState([]);\n\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getDailyStockChart(company);\n      setStockData(\n        formatIntradayStockData(result.data[\"Time Series (Daily)\"]).slice(0, 250)\n      );\n    };\n    fetchStockData();\n  }, [company]);\n\n  return (\n    <CanvasJSStockChart\n      options={{\n        theme: \"light2\",\n        charts: [\n          {\n            axisX: {\n              crosshair: {\n                enabled: true,\n                snapToDataPoint: true,\n                valueFormatString: \"MMM DD YYYY\",\n              },\n            },\n            axisY: {\n              prefix: \"$\",\n              crosshair: {\n                enabled: true,\n                snapToDataPoint: true,\n                valueFormatString: \"$#,###.##\",\n              },\n            },\n            toolTip: {\n              shared: true,\n            },\n            data: [\n              {\n                name: \"Price (in USD)\",\n                type: \"splineArea\",\n                color: \"#3a4cb1\",\n                yValueFormatString: \"$#,###.##\",\n                xValueFormatString: \"MMM DD YYYY\",\n                dataPoints: stockData.map((stockData) => ({\n                  x: new Date(stockData.date),\n                  y: stockData.close,\n                })),\n              },\n            ],\n          },\n        ],\n      }}\n    />\n  );\n};\n\nfunction formatDailyStockData(stockData) {\n  return Object.entries(stockData).map((entries) => {\n    const [date, priceData] = entries;\n    return {\n      date,\n      open: Number(priceData[\"1. open\"]),\n      high: Number(priceData[\"2. high\"]),\n      low: Number(priceData[\"3. low\"]),\n      close: Number(priceData[\"4. close\"]),\n    };\n  });\n}\n\nconst DailyCandlestickChart = ({ company }) => {\n  const [stockData, setStockData] = useState([]);\n\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getDailyStockChart(company);\n      setStockData(\n        formatDailyStockData(result.data[\"Time Series (Daily)\"]).slice(0, 250)\n      );\n    };\n    fetchStockData();\n  }, [company]);\n\n  return (\n    <CanvasJSStockChart\n      options={{\n        theme: \"light2\",\n        charts: [\n          {\n            axisX: {\n              tickLength: 0,\n              labelFormatter: function (e) {\n                return \"\";\n              },\n              crosshair: {\n                enabled: true,\n                snapToDataPoint: true,\n                labelFormatter: function (e) {\n                  return \"\";\n                },\n              },\n              scaleBreaks: {\n                spacing: 0,\n                fillOpacity: 0,\n                lineThickness: 0,\n                customBreaks: stockData.reduce(\n                  (breaks, value, index, array) => {\n                    if (index === 0) return breaks;\n                    const currentDataPointUnix = Number(new Date(value.date));\n                    const previousDataPointUnix = Number(\n                      new Date(array[index - 1].date)\n                    );\n                    const oneDayInMs = 86400000;\n                    const difference =\n                      previousDataPointUnix - currentDataPointUnix;\n                    return difference === oneDayInMs\n                      ? breaks\n                      : [\n                          ...breaks,\n                          {\n                            startValue: currentDataPointUnix,\n                            endValue: previousDataPointUnix - oneDayInMs,\n                          },\n                        ];\n                  },\n                  []\n                ),\n              },\n            },\n            axisY: {\n              prefix: \"$\",\n              tickLength: 0,\n            },\n            toolTip: {\n              shared: true,\n            },\n            data: [\n              {\n                name: \"Price (in USD)\",\n                yValueFormatString: \"$#,###.##\",\n                type: \"candlestick\",\n                risingColor: \"#04f77e\",\n                fallingColor: \"#ff3911\",\n                dataPoints: stockData.map((stockData) => ({\n                  x: new Date(stockData.date),\n                  y: [\n                    stockData.open,\n                    stockData.high,\n                    stockData.low,\n                    stockData.close,\n                  ],\n                })),\n              },\n            ],\n          },\n        ],\n        navigator: {\n          data: [\n            {\n              dataPoints: stockData.map((stockData) => ({\n                x: new Date(stockData.date),\n                y: stockData.close,\n              })),\n            },\n          ],\n        },\n      }}\n    />\n  );\n};\n\nconst DailySplineAreaChart = ({ company }) => {\n  const [stockData, setStockData] = useState([]);\n\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getDailyStockChart(company);\n      setStockData(\n        formatDailyStockData(result.data[\"Time Series (Daily)\"]).slice(0, 250)\n      );\n    };\n    fetchStockData();\n  }, [company]);\n\n  return (\n    <CanvasJSStockChart\n      options={{\n        theme: \"light2\",\n        charts: [\n          {\n            axisX: {\n              crosshair: {\n                enabled: true,\n                snapToDataPoint: true,\n                valueFormatString: \"MMM DD YYYY\",\n              },\n            },\n            axisY: {\n              prefix: \"$\",\n              crosshair: {\n                enabled: true,\n                snapToDataPoint: true,\n                valueFormatString: \"$#,###.##\",\n              },\n            },\n            toolTip: {\n              shared: true,\n            },\n            data: [\n              {\n                name: \"Price (in USD)\",\n                type: \"splineArea\",\n                color: \"#3a4cb1\",\n                yValueFormatString: \"$#,###.##\",\n                xValueFormatString: \"MMM DD YYYY\",\n                dataPoints: stockData.map((stockData) => ({\n                  x: new Date(stockData.date),\n                  y: stockData.close,\n                })),\n              },\n            ],\n          },\n        ],\n      }}\n    />\n  );\n};\n"]},"metadata":{},"sourceType":"module"}