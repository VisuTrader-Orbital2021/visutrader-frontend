{"ast":null,"code":"var _jsxFileName = \"/home/richwill/workspace/visutrader-frontend/src/components/StockChart.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { getDailyStockChart } from \"./APIConnector\";\nimport PropTypes from \"prop-types\";\nimport { format } from \"d3-format\";\nimport { timeFormat } from \"d3-time-format\";\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\nimport { BarSeries, CandlestickSeries, LineSeries } from \"react-stockcharts/lib/series\";\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\nimport { EdgeIndicator } from \"react-stockcharts/lib/coordinates\";\nimport { discontinuousTimeScaleProvider } from \"react-stockcharts/lib/scale\";\nimport { HoverTooltip } from \"react-stockcharts/lib/tooltip\";\nimport { ema } from \"react-stockcharts/lib/indicator\";\nimport { fitWidth } from \"react-stockcharts/lib/helper\";\nimport { last } from \"react-stockcharts/lib/utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst dateFormat = timeFormat(\"%Y-%m-%d\");\nconst numberFormat = format(\".2f\");\n\nfunction tooltipContent(ys) {\n  return ({\n    currentItem,\n    xAccessor\n  }) => {\n    return {\n      x: dateFormat(xAccessor(currentItem)),\n      y: [{\n        label: \"open\",\n        value: currentItem.open && numberFormat(currentItem.open)\n      }, {\n        label: \"high\",\n        value: currentItem.high && numberFormat(currentItem.high)\n      }, {\n        label: \"low\",\n        value: currentItem.low && numberFormat(currentItem.low)\n      }, {\n        label: \"close\",\n        value: currentItem.close && numberFormat(currentItem.close)\n      }].concat(ys.map(each => ({\n        label: each.label,\n        value: each.value(currentItem),\n        stroke: each.stroke\n      }))).filter(line => line.value)\n    };\n  };\n}\n\nconst keyValues = [\"high\", \"low\"];\n\nlet CandlestickChart = ({\n  company\n}) => {\n  _s();\n\n  const [stockData, setStockData] = useState([]);\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getDailyStockChart(company);\n      setStockData(formatDailyStockData(result.data[\"Time Series (Daily)\"]).slice(0, 250));\n    };\n\n    fetchStockData();\n  }, [company]); // removeRandomValues(data) {\n  // \treturn data.map(item => {\n  // \t\tconst newItem = { ...item };\n  // \t\tconst numberOfDeletion =\n  // \t\t\tMath.floor(Math.random() * keyValues.length) + 1;\n  // \t\tfor (let i = 0; i < numberOfDeletion; i += 1) {\n  // \t\t\tconst randomKey =\n  // \t\t\t\tkeyValues[Math.floor(Math.random() * keyValues.length)];\n  // \t\t\tnewItem[randomKey] = undefined;\n  // \t\t}\n  // \t\treturn newItem;\n  // \t});\n  // }\n  // let { type, data: initialData, width, ratio } = this.props;\n  // remove some of the data to be able to see\n  // the tooltip resize\n  // initialData = this.removeRandomValues(initialData);\n  // const ema20 = ema()\n  //   .id(0)\n  //   .options({ windowSize: 20 })\n  //   .merge((d, c) => {\n  //     d.ema20 = c;\n  //   })\n  //   .accessor((d) => d.ema20);\n  // const ema50 = ema()\n  //   .id(2)\n  //   .options({ windowSize: 50 })\n  //   .merge((d, c) => {\n  //     d.ema50 = c;\n  //   })\n  //   .accessor((d) => d.ema50);\n\n  const margin = {\n    left: 80,\n    right: 80,\n    top: 30,\n    bottom: 50\n  }; // const calculatedData = ema50(ema20(initialData));\n  // const xScaleProvider = discontinuousTimeScaleProvider.inputDateAccessor(\n  //   (d) => d.date\n  // );\n  // const { data, xScale, xAccessor, displayXAccessor } =\n  //   xScaleProvider(calculatedData);\n  // const start = xAccessor(last(data));\n  // const end = xAccessor(data[Math.max(0, data.length - 150)]);\n  // const xExtents = [start, end];\n\n  return /*#__PURE__*/_jsxDEV(ChartCanvas, {\n    height: 400 // width={width}\n    // ratio={ratio}\n    ,\n    margin: margin // type={type}\n    // seriesName=\"MSFT\"\n    // data={data}\n    // xScale={xScale}\n    // xAccessor={xAccessor}\n    // displayXAccessor={displayXAccessor}\n    // xExtents={xExtents}\n    ,\n    children: [/*#__PURE__*/_jsxDEV(Chart, {\n      id: 1 // yExtents={[(d) => [d.high, d.low], ema20.accessor(), ema50.accessor()]}\n      ,\n      yExtents: [d => [d.high, d.low]],\n      padding: {\n        top: 10,\n        bottom: 20\n      },\n      children: [/*#__PURE__*/_jsxDEV(XAxis, {\n        axisAt: \"bottom\",\n        orient: \"bottom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        axisAt: \"right\",\n        orient: \"right\",\n        ticks: 5\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CandlestickSeries, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(EdgeIndicator, {\n        itemType: \"last\",\n        orient: \"right\",\n        edgeAt: \"right\",\n        yAccessor: d => d.close,\n        fill: d => d.close > d.open ? \"#6BA583\" : \"#FF0000\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chart, {\n      id: 2,\n      yExtents: [d => d.volume],\n      height: 150,\n      origin: (w, h) => [0, h - 150],\n      children: [/*#__PURE__*/_jsxDEV(YAxis, {\n        axisAt: \"left\",\n        orient: \"left\",\n        ticks: 5,\n        tickFormat: format(\".2s\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(BarSeries, {\n        yAccessor: d => d.volume,\n        fill: d => d.close > d.open ? \"#6BA583\" : \"#FF0000\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 124,\n    columnNumber: 5\n  }, this);\n};\n\n_s(CandlestickChart, \"UHMRx5rd6U+J7YyAJ82PYuAdhyc=\");\n\n_c = CandlestickChart;\nCandlestickChart.propTypes = {\n  data: PropTypes.array.isRequired,\n  width: PropTypes.number.isRequired,\n  ratio: PropTypes.number.isRequired,\n  type: PropTypes.oneOf([\"svg\", \"hybrid\"]).isRequired\n};\nCandlestickChart.defaultProps = {\n  type: \"svg\"\n};\nCandlestickChart = fitWidth(CandlestickChart);\nexport default CandlestickChart;\n\nfunction formatDailyStockData(stockData) {\n  return Object.entries(stockData).map(entries => {\n    const [date, priceData] = entries;\n    const newDate = new Date(dateFormat(date));\n    console.log(newDate);\n    return {\n      date: new Date(dateFormat(date)),\n      open: Number(priceData[\"1. open\"]),\n      high: Number(priceData[\"2. high\"]),\n      low: Number(priceData[\"3. low\"]),\n      close: Number(priceData[\"4. close\"])\n    };\n  });\n} // const DailyCandlestickChart = ({ company }) => {\n//   const [stockData, setStockData] = useState([]);\n//   useEffect(() => {\n//     const fetchStockData = async () => {\n//       const result = await getDailyStockChart(company);\n//       setStockData(\n//         formatDailyStockData(result.data[\"Time Series (Daily)\"]).slice(0, 250)\n//       );\n//     };\n//     fetchStockData();\n//   }, [company]);\n//   return (\n//     <CanvasJSStockChart\n//       options={{\n//         theme: \"light2\",\n//         charts: [\n//           {\n//             axisX: {\n//               tickLength: 0,\n//               labelFormatter: function (e) {\n//                 return \"\";\n//               },\n//               crosshair: {\n//                 enabled: true,\n//                 snapToDataPoint: true,\n//                 labelFormatter: function (e) {\n//                   return \"\";\n//                 },\n//               },\n//               scaleBreaks: {\n//                 spacing: 0,\n//                 fillOpacity: 0,\n//                 lineThickness: 0,\n//                 customBreaks: stockData.reduce(\n//                   (breaks, value, index, array) => {\n//                     if (index === 0) return breaks;\n//                     const currentDataPointUnix = Number(new Date(value.date));\n//                     const previousDataPointUnix = Number(\n//                       new Date(array[index - 1].date)\n//                     );\n//                     const oneDayInMs = 86400000;\n//                     const difference =\n//                       previousDataPointUnix - currentDataPointUnix;\n//                     return difference === oneDayInMs\n//                       ? breaks\n//                       : [\n//                           ...breaks,\n//                           {\n//                             startValue: currentDataPointUnix,\n//                             endValue: previousDataPointUnix - oneDayInMs,\n//                           },\n//                         ];\n//                   },\n//                   []\n//                 ),\n//               },\n//             },\n//             axisY: {\n//               prefix: \"$\",\n//               tickLength: 0,\n//             },\n//             toolTip: {\n//               shared: true,\n//             },\n//             data: [\n//               {\n//                 name: \"Price (in USD)\",\n//                 yValueFormatString: \"$#,###.##\",\n//                 type: \"candlestick\",\n//                 risingColor: \"#04f77e\",\n//                 fallingColor: \"#ff3911\",\n//                 dataPoints: stockData.map((stockData) => ({\n//                   x: new Date(stockData.date),\n//                   y: [\n//                     stockData.open,\n//                     stockData.high,\n//                     stockData.low,\n//                     stockData.close,\n//                   ],\n//                 })),\n//               },\n//             ],\n//           },\n//         ],\n//         navigator: {\n//           data: [\n//             {\n//               dataPoints: stockData.map((stockData) => ({\n//                 x: new Date(stockData.date),\n//                 y: stockData.close,\n//               })),\n//             },\n//           ],\n//         },\n//       }}\n//     />\n//   );\n// };\n\n\nvar _c;\n\n$RefreshReg$(_c, \"CandlestickChart\");","map":{"version":3,"sources":["/home/richwill/workspace/visutrader-frontend/src/components/StockChart.js"],"names":["React","useState","useEffect","getDailyStockChart","PropTypes","format","timeFormat","ChartCanvas","Chart","BarSeries","CandlestickSeries","LineSeries","XAxis","YAxis","EdgeIndicator","discontinuousTimeScaleProvider","HoverTooltip","ema","fitWidth","last","dateFormat","numberFormat","tooltipContent","ys","currentItem","xAccessor","x","y","label","value","open","high","low","close","concat","map","each","stroke","filter","line","keyValues","CandlestickChart","company","stockData","setStockData","fetchStockData","result","formatDailyStockData","data","slice","margin","left","right","top","bottom","d","volume","w","h","propTypes","array","isRequired","width","number","ratio","type","oneOf","defaultProps","Object","entries","date","priceData","newDate","Date","console","log","Number"],"mappings":"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ACL,SAAS,CAAC,QAAD,CAAV,CAJN;AAKLtC,MAAAA,KAAK,EAAE2C,MAAM,CAACL,SAAS,CAAC,UAAD,CAAV;AALR,KAAP;AAOD,GAbM,CAAP;AAcD,C,CAED;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { getDailyStockChart } from \"./APIConnector\";\nimport PropTypes from \"prop-types\";\n\nimport { format } from \"d3-format\";\nimport { timeFormat } from \"d3-time-format\";\n\nimport { ChartCanvas, Chart } from \"react-stockcharts\";\nimport {\n  BarSeries,\n  CandlestickSeries,\n  LineSeries,\n} from \"react-stockcharts/lib/series\";\nimport { XAxis, YAxis } from \"react-stockcharts/lib/axes\";\nimport { EdgeIndicator } from \"react-stockcharts/lib/coordinates\";\n\nimport { discontinuousTimeScaleProvider } from \"react-stockcharts/lib/scale\";\nimport { HoverTooltip } from \"react-stockcharts/lib/tooltip\";\nimport { ema } from \"react-stockcharts/lib/indicator\";\nimport { fitWidth } from \"react-stockcharts/lib/helper\";\nimport { last } from \"react-stockcharts/lib/utils\";\n\nconst dateFormat = timeFormat(\"%Y-%m-%d\");\nconst numberFormat = format(\".2f\");\n\nfunction tooltipContent(ys) {\n  return ({ currentItem, xAccessor }) => {\n    return {\n      x: dateFormat(xAccessor(currentItem)),\n      y: [\n        {\n          label: \"open\",\n          value: currentItem.open && numberFormat(currentItem.open),\n        },\n        {\n          label: \"high\",\n          value: currentItem.high && numberFormat(currentItem.high),\n        },\n        {\n          label: \"low\",\n          value: currentItem.low && numberFormat(currentItem.low),\n        },\n        {\n          label: \"close\",\n          value: currentItem.close && numberFormat(currentItem.close),\n        },\n      ]\n        .concat(\n          ys.map((each) => ({\n            label: each.label,\n            value: each.value(currentItem),\n            stroke: each.stroke,\n          }))\n        )\n        .filter((line) => line.value),\n    };\n  };\n}\n\nconst keyValues = [\"high\", \"low\"];\n\nlet CandlestickChart = ({ company }) => {\n  const [stockData, setStockData] = useState([]);\n\n  useEffect(() => {\n    const fetchStockData = async () => {\n      const result = await getDailyStockChart(company);\n      setStockData(\n        formatDailyStockData(result.data[\"Time Series (Daily)\"]).slice(0, 250)\n      );\n    };\n    fetchStockData();\n  }, [company]);\n  // removeRandomValues(data) {\n  // \treturn data.map(item => {\n  // \t\tconst newItem = { ...item };\n  // \t\tconst numberOfDeletion =\n  // \t\t\tMath.floor(Math.random() * keyValues.length) + 1;\n  // \t\tfor (let i = 0; i < numberOfDeletion; i += 1) {\n  // \t\t\tconst randomKey =\n  // \t\t\t\tkeyValues[Math.floor(Math.random() * keyValues.length)];\n  // \t\t\tnewItem[randomKey] = undefined;\n  // \t\t}\n  // \t\treturn newItem;\n  // \t});\n  // }\n\n  // let { type, data: initialData, width, ratio } = this.props;\n\n  // remove some of the data to be able to see\n  // the tooltip resize\n  // initialData = this.removeRandomValues(initialData);\n\n  // const ema20 = ema()\n  //   .id(0)\n  //   .options({ windowSize: 20 })\n  //   .merge((d, c) => {\n  //     d.ema20 = c;\n  //   })\n  //   .accessor((d) => d.ema20);\n\n  // const ema50 = ema()\n  //   .id(2)\n  //   .options({ windowSize: 50 })\n  //   .merge((d, c) => {\n  //     d.ema50 = c;\n  //   })\n  //   .accessor((d) => d.ema50);\n\n  const margin = { left: 80, right: 80, top: 30, bottom: 50 };\n\n  // const calculatedData = ema50(ema20(initialData));\n  // const xScaleProvider = discontinuousTimeScaleProvider.inputDateAccessor(\n  //   (d) => d.date\n  // );\n  // const { data, xScale, xAccessor, displayXAccessor } =\n  //   xScaleProvider(calculatedData);\n\n  // const start = xAccessor(last(data));\n  // const end = xAccessor(data[Math.max(0, data.length - 150)]);\n  // const xExtents = [start, end];\n\n  return (\n    <ChartCanvas\n      height={400}\n      // width={width}\n      // ratio={ratio}\n      margin={margin}\n      // type={type}\n      // seriesName=\"MSFT\"\n      // data={data}\n      // xScale={xScale}\n      // xAccessor={xAccessor}\n      // displayXAccessor={displayXAccessor}\n      // xExtents={xExtents}\n    >\n      <Chart\n        id={1}\n        // yExtents={[(d) => [d.high, d.low], ema20.accessor(), ema50.accessor()]}\n        yExtents={[(d) => [d.high, d.low]]}\n        padding={{ top: 10, bottom: 20 }}\n      >\n        <XAxis axisAt=\"bottom\" orient=\"bottom\" />\n\n        <YAxis axisAt=\"right\" orient=\"right\" ticks={5} />\n\n        <CandlestickSeries />\n        {/* <LineSeries yAccessor={ema20.accessor()} stroke={ema20.stroke()} />\n        <LineSeries yAccessor={ema50.accessor()} stroke={ema50.stroke()} /> */}\n\n        <EdgeIndicator\n          itemType=\"last\"\n          orient=\"right\"\n          edgeAt=\"right\"\n          yAccessor={(d) => d.close}\n          fill={(d) => (d.close > d.open ? \"#6BA583\" : \"#FF0000\")}\n        />\n\n        {/* <HoverTooltip\n          yAccessor={ema50.accessor()}\n          tooltipContent={tooltipContent([\n            {\n              label: `${ema20.type()}(${ema20.options().windowSize})`,\n              value: (d) => numberFormat(ema20.accessor()(d)),\n              stroke: ema20.stroke(),\n            },\n            {\n              label: `${ema50.type()}(${ema50.options().windowSize})`,\n              value: (d) => numberFormat(ema50.accessor()(d)),\n              stroke: ema50.stroke(),\n            },\n          ])}\n          fontSize={15}\n        /> */}\n      </Chart>\n      <Chart\n        id={2}\n        yExtents={[(d) => d.volume]}\n        height={150}\n        origin={(w, h) => [0, h - 150]}\n      >\n        <YAxis\n          axisAt=\"left\"\n          orient=\"left\"\n          ticks={5}\n          tickFormat={format(\".2s\")}\n        />\n\n        <BarSeries\n          yAccessor={(d) => d.volume}\n          fill={(d) => (d.close > d.open ? \"#6BA583\" : \"#FF0000\")}\n        />\n      </Chart>\n    </ChartCanvas>\n  );\n};\n\nCandlestickChart.propTypes = {\n  data: PropTypes.array.isRequired,\n  width: PropTypes.number.isRequired,\n  ratio: PropTypes.number.isRequired,\n  type: PropTypes.oneOf([\"svg\", \"hybrid\"]).isRequired,\n};\n\nCandlestickChart.defaultProps = {\n  type: \"svg\",\n};\nCandlestickChart= fitWidth(CandlestickChart);\n\nexport default CandlestickChart;\n\nfunction formatDailyStockData(stockData) {\n  return Object.entries(stockData).map((entries) => {\n    const [date, priceData] = entries;\n\n    const newDate = new Date(dateFormat(date));\n    console.log(newDate);\n    \n    return {\n      date: new Date(dateFormat(date)),\n      open: Number(priceData[\"1. open\"]),\n      high: Number(priceData[\"2. high\"]),\n      low: Number(priceData[\"3. low\"]),\n      close: Number(priceData[\"4. close\"]),\n    };\n  });\n}\n\n// const DailyCandlestickChart = ({ company }) => {\n//   const [stockData, setStockData] = useState([]);\n\n//   useEffect(() => {\n//     const fetchStockData = async () => {\n//       const result = await getDailyStockChart(company);\n//       setStockData(\n//         formatDailyStockData(result.data[\"Time Series (Daily)\"]).slice(0, 250)\n//       );\n//     };\n//     fetchStockData();\n//   }, [company]);\n\n//   return (\n//     <CanvasJSStockChart\n//       options={{\n//         theme: \"light2\",\n//         charts: [\n//           {\n//             axisX: {\n//               tickLength: 0,\n//               labelFormatter: function (e) {\n//                 return \"\";\n//               },\n//               crosshair: {\n//                 enabled: true,\n//                 snapToDataPoint: true,\n//                 labelFormatter: function (e) {\n//                   return \"\";\n//                 },\n//               },\n//               scaleBreaks: {\n//                 spacing: 0,\n//                 fillOpacity: 0,\n//                 lineThickness: 0,\n//                 customBreaks: stockData.reduce(\n//                   (breaks, value, index, array) => {\n//                     if (index === 0) return breaks;\n//                     const currentDataPointUnix = Number(new Date(value.date));\n//                     const previousDataPointUnix = Number(\n//                       new Date(array[index - 1].date)\n//                     );\n//                     const oneDayInMs = 86400000;\n//                     const difference =\n//                       previousDataPointUnix - currentDataPointUnix;\n//                     return difference === oneDayInMs\n//                       ? breaks\n//                       : [\n//                           ...breaks,\n//                           {\n//                             startValue: currentDataPointUnix,\n//                             endValue: previousDataPointUnix - oneDayInMs,\n//                           },\n//                         ];\n//                   },\n//                   []\n//                 ),\n//               },\n//             },\n//             axisY: {\n//               prefix: \"$\",\n//               tickLength: 0,\n//             },\n//             toolTip: {\n//               shared: true,\n//             },\n//             data: [\n//               {\n//                 name: \"Price (in USD)\",\n//                 yValueFormatString: \"$#,###.##\",\n//                 type: \"candlestick\",\n//                 risingColor: \"#04f77e\",\n//                 fallingColor: \"#ff3911\",\n//                 dataPoints: stockData.map((stockData) => ({\n//                   x: new Date(stockData.date),\n//                   y: [\n//                     stockData.open,\n//                     stockData.high,\n//                     stockData.low,\n//                     stockData.close,\n//                   ],\n//                 })),\n//               },\n//             ],\n//           },\n//         ],\n//         navigator: {\n//           data: [\n//             {\n//               dataPoints: stockData.map((stockData) => ({\n//                 x: new Date(stockData.date),\n//                 y: stockData.close,\n//               })),\n//             },\n//           ],\n//         },\n//       }}\n//     />\n//   );\n// };\n"]},"metadata":{},"sourceType":"module"}