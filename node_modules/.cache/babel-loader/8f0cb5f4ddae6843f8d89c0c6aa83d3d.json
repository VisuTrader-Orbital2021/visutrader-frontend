{"ast":null,"code":"import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { sendRequest } from \"../../utils/api\";\nimport { parseISO } from \"date-fns\";\nconst initialState = {\n  balance: 0,\n  expense: 0,\n  profit: 0,\n  history: [],\n  loading: false\n};\nexport const getWalletDetail = createAsyncThunk(\"wallet/getWalletDetail\", async (_, {\n  getState,\n  rejectWithValue\n}) => {\n  const token = getState().user.token;\n  const wallet = getState().user.wallet;\n\n  if (!token) {\n    return rejectWithValue(\"token is required\");\n  }\n\n  try {\n    const walletData = await sendRequest(wallet, token, \"get\");\n    const serializedHistory = walletData.history.map(transaction => sendRequest(transaction, token, \"get\")); // TODO: is this the best way?\n\n    await Promise.all(serializedHistory).then(data => {\n      walletData.history = data;\n    });\n    return walletData;\n  } catch (err) {\n    return rejectWithValue(err.response.data);\n  }\n});\nconst walletSlice = createSlice({\n  name: \"wallet\",\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getWalletDetail.fulfilled, (state, {\n      payload\n    }) => {\n      state.balance = payload.balance;\n      state.history = payload.history;\n      state.profit = 0;\n      state.expense = 0;\n\n      if (state.history.length) {\n        state.history = state.history.map(transaction => ({\n          amount: transaction.amount,\n          market: transaction.market,\n          fromWallet: transaction.from_wallet,\n          createdAt: transaction.created_at\n        }));\n        state.history.sort((a, b) => parseISO(a.createdAt) - parseISO(b.createdAt));\n        state.history.forEach(({\n          amount,\n          market\n        }) => {\n          if (amount > 0) {\n            state.profit += amount;\n          } else {\n            state.expense += -amount;\n          }\n        });\n      }\n    });\n  }\n});\nexport default walletSlice.reducer;","map":{"version":3,"sources":["/home/richwill/workspace/visutrader-frontend/src/redux/slices/wallet.js"],"names":["createAsyncThunk","createSlice","sendRequest","parseISO","initialState","balance","expense","profit","history","loading","getWalletDetail","_","getState","rejectWithValue","token","user","wallet","walletData","serializedHistory","map","transaction","Promise","all","then","data","err","response","walletSlice","name","reducers","extraReducers","builder","addCase","fulfilled","state","payload","length","amount","market","fromWallet","from_wallet","createdAt","created_at","sort","a","b","forEach","reducer"],"mappings":"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","sourcesContent":["import { createAsyncThunk, createSlice } from \"@reduxjs/toolkit\";\nimport { sendRequest } from \"../../utils/api\";\nimport { parseISO } from \"date-fns\";\n\nconst initialState = {\n  balance: 0,\n  expense: 0,\n  profit: 0,\n  history: [],\n  loading: false,\n};\n\nexport const getWalletDetail = createAsyncThunk(\n  \"wallet/getWalletDetail\",\n  async (_, { getState, rejectWithValue }) => {\n    const token = getState().user.token;\n    const wallet = getState().user.wallet;\n\n    if (!token) {\n      return rejectWithValue(\"token is required\");\n    }\n\n    try {\n      const walletData = await sendRequest(wallet, token, \"get\");\n\n      const serializedHistory = walletData.history.map((transaction) =>\n        sendRequest(transaction, token, \"get\")\n      );\n\n      // TODO: is this the best way?\n      await Promise.all(serializedHistory).then((data) => {\n        walletData.history = data;\n      });\n\n      return walletData;\n    } catch (err) {\n      return rejectWithValue(err.response.data);\n    }\n  }\n);\n\nconst walletSlice = createSlice({\n  name: \"wallet\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getWalletDetail.fulfilled, (state, { payload }) => {\n      state.balance = payload.balance;\n      state.history = payload.history;\n      state.profit = 0;\n      state.expense = 0;\n\n      if (state.history.length) {\n        state.history = state.history.map((transaction) => ({\n          amount: transaction.amount,\n          market: transaction.market,\n          fromWallet: transaction.from_wallet,\n          createdAt: transaction.created_at,\n        }));\n\n        state.history.sort(\n          (a, b) => parseISO(a.createdAt) - parseISO(b.createdAt)\n        );\n\n        state.history.forEach(({ amount, market }) => {\n          if (amount > 0) {\n            state.profit += amount;\n          } else {\n            state.expense += -amount;\n          }\n        });\n      }\n    });\n  },\n});\n\nexport default walletSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}